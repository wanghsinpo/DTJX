#!/usr/bin/ksh
trap "" 23

ECHO=print
FWK=/opt/SPECS/usr/fwk
USRBIN=/usr/bin
if [ `id -un` != "root" ]; then
  $ECHO "ERROR: You must log in as root."
  exit
else

  $ECHO
  $ECHO "#### Change OCR Mode Setting!! ####"
  $ECHO "Do you want to use OCR?"
  $ECHO "Type y (yes) or n (no), then press Return."
  $ECHO
  $ECHO "Default = 'y'. [skip='s'] : \c"
  read OCRUSE
  $ECHO

  if [ "$OCRUSE" = "s" ]
  then
    exit
  elif [ "$OCRUSE" = "y" ]
  then
    $ECHO
  elif [ "$OCRUSE" = "n" ]
  then
    $ECHO
  elif [ "$OCRUSE" = "" ]
  then
    OCRUSE="y"
  else
    exit
  fi
  if [ "$OCRUSE" = "n" ]
  then
    $ECHO "how do you want to get wafer id ?"
    $ECHO
    $ECHO "  state Type       Description"
    $ECHO "  --------------- ------------------------------------------------------"
    $ECHO "  host            assign the number from host as wafer id "
    $ECHO "  slot            assign slot number as wafer id"
    $ECHO
    $ECHO "Enter the OCR state type for development and execution."
    $ECHO "Default = 'host'. [skip='s'] : \c"
    read OCRTYPE
    $ECHO

    if [ "$OCRTYPE" = "s" ]
    then
      exit
    elif [ "$OCRTYPE" = "host" ]
    then
      PROBERTYPE="OFF_HOST"
      OCRSTATE="OFF_HOST"
    elif [ "$OCRTYPE" = "slot" ]
    then
      PROBERTYPE="OFF_SLOT"
      OCRSTATE="OFF_SLOT"
    elif [ "$OCRTYPE" = "" ]
    then
      PROBERTYPE="OFF_HOST"
      OCRSTATE="OFF_HOST"
    else
      exit
    fi
  elif [ "$OCRUSE" = "y" ]
  then
    $ECHO "if fail,how do you want to get wafer id ?"
    $ECHO
    $ECHO "  state Type       Description"
    $ECHO "  --------------- ------------------------------------------------------"
    $ECHO "  host             assign the number from host as wafer id"
    $ECHO "  slot             assign slot number as wafer id"
    $ECHO "  keyinput         operator input the number as wafer id"
    $ECHO
    $ECHO "Enter the OCR state type for development and execution."
    $ECHO "Default = 'host'. [skip='s'] : \c"
    read OCRTYPE
    $ECHO

    if [ "$OCRTYPE" = "s" ]
    then
      exit
    elif [ "$OCRTYPE" = "host" ]
    then
      PROBERTYPE="ON_HOST"
      OCRSTATE="ON_HOST"
    elif [ "$OCRTYPE" = "slot" ]
    then
      PROBERTYPE="ON_SLOT"
      OCRSTATE="ON_SLOT"
    elif [ "$OCRTYPE" = "keyinput" ]
    then
      PROBERTYPE="ON_KEYINPUT"
      OCRSTATE="ON_KEYINPUT"
    elif [ "$OCRTYPE" = "" ]
    then
      PROBERTYPE="ON_HOST"
      OCRSTATE="ON_HOST"
    else
      exit
    fi
  fi

  TEMPMAK=/opt/SPECS_FA/dmh/vgem/defaults.ini
  if [ -f $TEMPMAK ]; then
    if $USRBIN/grep CurrentOCRState $TEMPMAK >/dev/null;then
      sed -e "s/^VGEM CurrentOCRState .*/VGEM CurrentOCRState $OCRSTATE/" $TEMPMAK > $TEMPMAK.tmp
      mv $TEMPMAK.tmp $TEMPMAK
      chmod 444 $TEMPMAK
      chown root:sys $TEMPMAK
      $ECHO "Customizing $TEMPMAK..."
    fi
  fi
  $ECHO "        Checking framework configuration files..."
  if [ `ls $FWK/*.cf | wc -l` != 0 ]; then
    for i in $FWK/*.cf; do
      if grep -q "FA_RSV_OCR_STATE" $i >/dev/null;then
        sed -e 's/^FA_RSV_OCR_STATE:.*$/FA_RSV_OCR_STATE:'$PROBERTYPE'/' $i > $i.tmp
        cp -f $i.tmp $i
        rm -f $i.tmp
        chmod 666 $i
        chown root:sys $i
        $ECHO "Customizing $i..."
      fi
      if grep -q "FA_OCR_STATE" $i >/dev/null;then
        sed -e 's/^FA_OCR_STATE:.*$/FA_OCR_STATE:'$PROBERTYPE'/' $i > $i.tmp
        cp -f $i.tmp $i
        rm -f $i.tmp
        chmod 666 $i
        chown root:sys $i
        $ECHO "Customizing $i..."
      fi
    done
  fi
  $ECHO
fi

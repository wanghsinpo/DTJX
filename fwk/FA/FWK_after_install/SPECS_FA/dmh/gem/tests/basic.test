
#  starts both gemhost and gemsim
# uses tk send - start dmh_wish in foreground
# 
if {[string compare test [info procs test]] == 1} then {source defs}

global testdir gemsim_pid gemhost_pid gemsim gemhost


test basic-1 {start gemsim} {
    global testdir gemsim_pid gemsim
    set testdir [pwd]
    cd ../equip
    set gemsim gemsim
    set gemsim_pid [exec gemsim &]
    cd $testdir
    expr $gemsim_pid > 0 
} 1

# use send to find gemsim
test basic-2 {send to gemsim} {
    global gemsim gemsim_pid
    wait 5000  ;# allow for init
    send $gemsim set gemsim(comm_state)
} {ENABLED {NOT COMMUNICATING}}
    

test basic-3 {start gemhost} {
  global testdir gemhost gemhost_pid
  cd ../host
  set gemhost gemhost
  set gemhost_pid [exec gemhost &]
  cd $testdir
  expr $gemhost_pid > 0
} 1

# use send to chat with gemhost
test basic-4 {send to gemhost} {
    global gemhost gemhost_pid
    wait 10000  ;# allow for init
    send $gemhost set gemhost(comm_state)
} {COMMUNICATING}

# gemsim should also be talking
test basic-5 {send to gemsim} {
    global gemsim gemsim_pid
    send $gemsim set gemsim(comm_state)
} {COMMUNICATING}

# raise the main windows so any errors are visible
test basic-6 {send to gemsim} {
    global gemsim gemhost
    send $gemsim wm deiconify .
    send $gemhost wm deiconify .
} {}

test basic-7  {does gemsim reject unknown SnFm with S9} {
    global gemhost
    set cmd "secs_xact gemhost S3F17R {A {Carrier Received}}"
    set reply1 [send $gemhost $cmd]
    set cmd "secs_xact_failure gemhost"
    set reply2 [send $gemhost $cmd]
    list $reply1 $reply2
} {TIMEOUT REJECTED}

test basic-8 {gemsim should be in ON-LINE REMOTE mode} {
    global gemsim
    send $gemsim set gemsim(control_mode)
} {REMOTE}

test basic-9 {gemsim should perform recipe select RCMD} {
    global gemsim gemhost
    send $gemhost ei_rcmd gemhost PP-SELECT {{A PPExecName} {A brownies}}
} {0}

test basic-10 {gemsim should perform START RCMD} {
    global gemsim gemhost
    send $gemhost ei_rcmd gemhost START
} {0}

test basic-11 {put gemim in local control} {
    global gemsim gemhost
    send $gemsim set gemsim(control_mode) LOCAL
} {LOCAL}

test basic-12 {put gemim in local control} {
    global gemsim gemhost
    # call GUI action the way that the checkbox does
    send $gemsim eq_ui_control_mode gemsim
    send $gemsim set gemsim(control_state)
} {ON-LINE LOCAL}

test basic-13 {host sees event 4001 from control state change} {
    global gemsim gemhost
    wait 1000
    send $gemhost set gemhost(lastrmsg)
} {L:3 {U4:1 4001} {U4:1 4001} {L:0}}

test basic-14 {gemsim rejects process RCMD in local mode} {
    global gemsim gemhost
    wait 1000
    send $gemhost ei_rcmd gemhost STOP
} {2}

test basic-15 {put gemim in remote control} {
    global gemsim gemhost
    send $gemsim set gemsim(control_mode) REMOTE
} {REMOTE}

test basic-16 {put gemim in remote control} {
    global gemsim gemhost
    # call GUI action the way that the checkbox does
    send $gemsim eq_ui_control_mode gemsim
    send $gemsim set gemsim(control_state)
} {ON-LINE REMOTE}

test basic-17 {gemsim process RCMD} {
    global gemsim gemhost
    wait 1000
    send $gemhost ei_rcmd gemhost STOP
} {0}

test basic-18 {ask gemsim to go offline} {
    global gemsim gemhost
    send $gemhost secs_xact gemhost S1F15R
} {B:1 0x00}

wait 1000 ;# offline event then offline - changed 12/16/00

test basic-18b {offline event} {
    global gemsim gemhost
    send $gemhost set gemhost(lastrSFR)
} {S6F13R}

test basic-19 {eq_when_offline} {
    global gemsim gemhost
    send $gemhost secs_xact gemhost S1F1R
} {TIMEOUT}

test basic-20a {eq_when_offline} {
    global gemsim gemhost
    send $gemhost set gemhost(lastrSFR)
} {S1F0}


test basic-21 {eq_when_offline} {
    global gemsim gemhost
    send $gemhost secs_xact gemhost S2F25R {B 1 2 3}
} {B:3 0x01 0x02 0x03}

test basic-22 {ask gemsim to go online} {
    global gemsim gemhost
    send $gemhost secs_xact gemhost S1F17R
} {B:1 0x00}

wait 1000 ;# expect online event

test basic-23 {online event} {
    global gemsim gemhost
    send $gemhost set gemhost(lastrSFR)
} {S6F13R}

test basic-24 {default gemsim clock} {
    global gemsim gemhost
    set reply [send $gemhost secs_xact gemhost S2F17R]
    # A:16 2000mmddhhmmsscc
    lindex $reply 0
} {A:16}

test basic-25 {change clock format} {
    global gemsim gemhost
    set reply [send $gemhost secs_xact gemhost S2F15R {L {L {U4 900} {U4 0}}}]
} {B:1 0x00}

test basic-26 {gemsim clock format 0} {
    global gemsim gemhost
    set reply [send $gemhost secs_xact gemhost S2F17R]
    # A:12 00mmddhhmmss
    lindex $reply 0
} {A:12}


test basic-27 {restore clock format} {
    global gemsim gemhost
    set reply [send $gemhost secs_xact gemhost S2F15R {L {L {U4 900} {U4 1}}}]
} {B:1 0x00}

test basic-28 {default gemsim clock} {
    global gemsim gemhost
    set reply [send $gemhost secs_xact gemhost S2F17R]
    # A:16 2000mmddhhmmsscc
    lindex $reply 0
} {A:16}


test basic-29 {eq has an alarm} {
    global gemsim gemhost
    set reply [send $gemsim SQL "update ei_alarm set is_set=1 where ALID='1000'"]
    string first "//c 0" $reply
} {1}

wait 1000

test basic-30 {host sees alarm and then event} {
    global gemsim gemhost
    set reply [send $gemhost SQL "select ALID from ei_alarm_log"]
    lindex $reply 4
} {1}

test basic-31 {host sees alarm and then event} {
    global gemsim gemhost
    set reply [send $gemhost set gemhost(lastrSFR)]
} {S6F13R}

test basic-32 {clear alarm} {
    global gemsim gemhost
    set reply [send $gemsim SQL "update ei_alarm set is_set=0 where ALID='1000'"]
    string first "//c 0" $reply
} {1}

wait 1000

test basic-33 {host sees alarm and then event} {
    global gemsim gemhost
    set reply [send $gemhost SQL "select ALID from ei_alarm_log where is_set=0"]
    lindex $reply 4
} {1}

test basic-34 {host sees alarm and then event} {
    global gemsim gemhost
    set reply [send $gemhost SQL "select CEID from ei_event_log where CEID='1000'"]
    lindex $reply 4
} {1}


test basic-35 {disable set/clear event reports} {
    global gemsim gemhost
    # empty alarm log
    send $gemhost SQL "delete from ei_alarm_log"
    # empty event log
    send $gemhost SQL "delete from ei_event_log"
    send $gemhost ei_event_disable gemhost {1000 1001}
} {0}

wait 1000

test basic-36 {eq has an alarm} {
    global gemsim gemhost
    set reply [send $gemsim SQL "update ei_alarm set is_set=1 where ALID='1000'"]
    string first "//c 0" $reply
} {1}

wait 1000

test basic-37 {host sees alarm and no event} {
    global gemsim gemhost
    set reply [send $gemhost SQL "select ALID from ei_alarm_log"]
    lindex $reply 4
} {1}

test basic-38 {host sees alarm and no event} {
    global gemsim gemhost
    set reply [send $gemhost SQL "select CEID from ei_event_log where CEID='1000'"]
    lindex $reply 4
} {0}

test basic-39 {disable alarm/clear report} {
    global gemsim gemhost
    send $gemhost ei_alarm_enable gemhost 0 {1000}
} {0}

wait 1000

test basic-40 {preclear alarm_log} {
    global gemsim gemhost
    # empty alarm log
    set reply [send $gemhost SQL "delete from ei_alarm_log"]
    string first "//c 0" $reply
} {1}

test basic-41 {clear alarm} {
    global gemsim gemhost
    set reply [send $gemsim SQL "update ei_alarm set is_set=0 where ALID='1000'"]
    string first "//c 0" $reply
} {1}

wait 1000

test basic-42 {host sees no alarm and no event} {
    global gemsim gemhost
    set reply [send $gemhost SQL "select ALID from ei_alarm_log"]
    lindex $reply 4
} {0}

test basic-43 {host sees no alarm and no event} {
    global gemsim gemhost
    set reply [send $gemhost SQL "select CEID from ei_event_log"]
    lindex $reply 4
} {0}

test basic-44 {eq has an alarm} {
    global gemsim gemhost
    set reply [send $gemsim SQL "update ei_alarm set is_set=1 where ALID='1000'"]
    string first "//c 0" $reply
} {1}

wait 1000

test basic-45 {host sees no alarm and no event} {
    global gemsim gemhost
    set reply [send $gemhost SQL "select ALID from ei_alarm_log"]
    lindex $reply 4
} {0}

test basic-46 {host sees no alarm and no event} {
    global gemsim gemhost
    set reply [send $gemhost SQL "select CEID from ei_event_log"]
    lindex $reply 4
} {0}

test basic-47 {alarm text has imbedded quote fixed 12/15/00} {
    global gemsim gemhost
    set reply [send $gemsim SQL {update ei_alarm set is_set=0,ALTX='test "hello world"' where ALID='1000'}]
    string first "//c 0" $reply
} {1}

test basic-48 {enable alarm/clear report} {
    global gemsim gemhost
    send $gemhost ei_alarm_enable gemhost 1 {1000}
} {0}

wait 1000

test basic-49 {eq has an alarm} {
    global gemsim gemhost
    set reply [send $gemsim SQL "update ei_alarm set is_set=1 where ALID='1000'"]
    string first "//c 0" $reply
} {1}

wait 1000

test basic-50 {host sees alarm and no event} {
    global gemsim gemhost
    set reply [send $gemhost SQL "select ALID from ei_alarm_log"]
    lindex $reply 4
} {1}

test basic-51 {restore usual alarm 1000} {
    global gemsim gemhost
    set reply [send $gemsim SQL {update ei_alarm set is_set=0,ALTX='Software test alarm 1000' where ALID='1000'}]
    string first "//c 0" $reply
} {1}

wait 1000


test basic-52 {S5F5 proper use} {
    global gemsim gemhost
    send $gemhost secs_xact gemhost S5F5R {U4 1002 1000}
} {L:2 {L:3 {B:1 0x00} {U4:1 1002} {A:24 {Software test alarm 1002}}} {L:3 {B:1 0x00} {U4:1 1000} {A:24 {Software test alarm 1000}}}}

test basic-52 {S5F5 with bad ALID} {
    global gemsim gemhost
    send $gemhost secs_xact gemhost S5F5R {U4 1002 900}
} {L:2 {L:3 {B:1 0x00} {U4:1 1002} {A:24 {Software test alarm 1002}}} {L:3 {B:0} {U4:1 900} {A:0}}}

test basic-53 {enable good alarm ID} {
    global gemsim gemhost
    send $gemhost secs_xact gemhost S5F3R {L {B 1} {U4 1002}}
} {B:1 0x00}

test basic-54 {enable bad alarm ID} {
    global gemsim gemhost
    send $gemhost secs_xact gemhost S5F3R {L {B 1} {U4 900}}
} {B:1 0x40}


test basic-55  {does gemsim reject bad data with S9F7} {
    global gemhost
    set cmd "gemhost putl S1F3R {0x42 0x61 0x64 0x20 0x53 0x45 0x43 0x53 0x20 0x44 0x61 0x74 0x61}"
    set reply1 [send $gemhost $cmd]
    wait 1000
    set cmd "set gemhost(lastrSFR)"
    set reply2 [send $gemhost $cmd]
    list $reply1 $reply2
} {{send_complete success} S9F7}

#################################################
# final shutdown
test basic-end {kill processes} {
    global gemsim gemhost
    send $gemsim "after 1 exit"
    send $gemhost "after 1 exit"
    expr 1
    } 1


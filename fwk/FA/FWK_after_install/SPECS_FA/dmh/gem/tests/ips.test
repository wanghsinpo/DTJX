#  starts both gemhost and gemsim
# uses tk send - start dmh_wish in foreground
# Note you will get error dialogs in this test from closing the gemhost
# in the middle of use.
# 
# test SECS-I/IP with equipment busily sending when host shuts off connection
# 
if {[string compare test [info procs test]] == 1} then {source defs}

global testdir gemsim_pid gemhost_pid gemsim gemhost


test ips-1 {start gemsim} {
    global testdir gemsim_pid gemsim
    set testdir [pwd]
    cd ../equip
    set gemsim gemsim
    set gemsim_pid [exec gemsim "set PORT :5556,S" &]
    cd $testdir
    expr $gemsim_pid > 0 
} 1

# use send to find gemsim
test ips-2 {send to gemsim} {
    global gemsim gemsim_pid
    wait 5000  ;# allow for init
    send $gemsim set gemsim(comm_state)
} {ENABLED {NOT COMMUNICATING}}
    

test ips-3 {start gemhost} {
  global testdir gemhost gemhost_pid
  cd ../host
  set gemhost gemhost
  set gemhost_pid [exec gemhost "set PORT :5556" &]
  cd $testdir
  expr $gemhost_pid > 0
} 1

# use send to chat with gemhost
test ips-4 {send to gemhost} {
    global gemhost gemhost_pid
    wait 44000  ;# allow for init
    send $gemhost set gemhost(comm_state)
} {COMMUNICATING}

# gemsim should also be talking
test ips-5 {send to gemsim} {
    global gemsim gemsim_pid
    send $gemsim set gemsim(comm_state)
} {COMMUNICATING}


# raise the main windows so any errors are visible
test ips-6 {send to gemsim} {
    global gemsim gemhost
    send $gemsim wm deiconify .
    send $gemhost wm deiconify .
} {}


# purge the spool (if any)
# there will be an operator alert if there was spooled data
test ips-6b {gemsim spool purge} {
   global gemhost
   set cmd "secs_xact gemhost S6F23R {U1 1}"
   lindex [send $gemhost $cmd] 0
} {B:1}

# have gemhost tell gemsim to turn off spooling 
test ips-8 {S2F43 off} {
   global gemhost
   set cmd "secs_xact gemhost S2F43R L"
   send $gemhost $cmd
} {L:2 {B:1 0x00} {L:0}}

# have gemsim start pumping alarm set / alarm clear
test ips-9 {alarm start} {
  set cmd {proc alarm_test {{delta 1000}} {
    global alarm_test
    set where "where spname='gemsim' and ALID=1000"
    set reply [SQL "select is_set from ei_alarm $where"]
    set e [lindex [lindex [lindex $reply 6] 0] 0]
    set flip [expr 1 - $e ]
    SQL "update ei_alarm set is_set=$flip where spname='gemsim' and ALID=1000"
    set alarm_test(handle) [after $delta "alarm_test $delta"]
    }}
    send $gemsim $cmd
} {}

test ips-9B {alarm start} {
    set reply [send $gemsim alarm_test 1000]
    string match after* $reply 
} {1}

# cycle host connection 

for {set cycle 0} {$cycle < 3} { incr cycle} {
   
  wait 10000
  test ips-10 {drop connection} {
      send $gemhost gemhost close
      } {}

  wait 10000
  test ips-11 {restore connection} {
       set reply [send $gemhost ei_startup gemhost :5556 0 0 9600 0]
       expr [string first started $reply] > 0
       } {1}
 
  }

send $gemsim after 1 exit
send $gemhost after 1 exit

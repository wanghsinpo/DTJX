#!/bin/sh
# $Header: /usr/cvsroot/gem/host/supervisor,v 1.3 2002/11/01 15:57:14 hume Exp $
# Licensed and Supported Software
# (C)Copyright 1998 Hume Integration Software
# All Rights Reserved
#
# Restart using Tcl/Tk
# Use -notk to run detached from X-windows.
# \
exec dmh_wish -tclargs "$@" -f "$0"

# show the database ui when running with Tk
global tk_version env
if { [info exists tk_version] } {
    if { [info exists env(DMH_BIN)] } {
        source [file join $env(DMH_BIN) hub[join [split $tk_version .] ""]]
        } \
    else { 
        source [file join /usr/local/bin hub[join [split $tk_version .] ""]]
        }
    }

# GEM Host Interface Supervisor 
#      -Shows configured equipment interfaces
#      -Has buttons to copy, configure, start, stop equipment interfaces
#      -Running this script is an alternative to running the single
#       equipment interface, gemhost, using the gemhost script.
#
#      Design Assumptions
#         The equipment interfaces will run in the same process as this logic.
#         The equipment interfaces that you have configured for
#           "auto_start" will be started.
#         The equipment interfaces will optionally participate in a single
#           DMH message group.  You can specify this group on the command 
#           line eg., "set MB_GROUP mygroup"
#         We will connect to the DMH message system when the first 
#           equipment interface is started.  We will use mailbox names
#           based on the equipment interface names.  There will not be
#           a conflict with having multiple instances of this script
#           running as long as the equipment connections have different
#           names.

# $Log: supervisor,v $
# Revision 1.3  2002/11/01 15:57:14  hume
# Changed lset usage to vset usage, using dmh_import, and dmh_var for Tcl 8.4
# compatibility.
#
# Revision 1.2  2001/11/15 17:03:50  hume
# Changed Hume Integration Services to Hume Integration Software.
#
# Revision 1.1  1998/01/29 16:20:19  hume
# Added supervisor application.
#


proc main {} {
    # Add this directory and others to the path that is searched for
    # unknown Tcl procedures (see mann/library.html).
    # If you need to customize any of the source code, copy the file(s)
    # to ../custom,  rebuild the tclIndex there, and your version 
    # will be found and used instead of the HIS version.
    # The file commands are used for portability.
    global auto_path
    set pwd [pwd]
    if { [lsearch -exact $auto_path $pwd] < 0 } {
        # If we are not running in the "host" directory, add the
        # current directory to the auto_path first.
        # We assume the customer has copied this file to a new
        # directory which has equipment specific code.
        set phost [file join [file dirname $pwd] host]
        if { ![file isdirectory $phost] } {
           error "Can't find \"host\" subdirectory.  The auto_path\
 initialization code assumes that the working directory is the\
 \"host\" directory, or a peer to it such as ../custom or\
 ../<your_dir>"
           }
        # we only add it to the auto_path if its properly indexed
        if { $pwd != $phost && \
                [file exists [file join $pwd tclIndex]]} {
            lappend auto_path $pwd
            }
        # Next, if the customer has installed custom code in the 
        # custom directory, add it to the auto_path, if we did not
        # already add it above.
        set pcustom [file join [file dirname $pwd] custom]
        if { [file exists [file join $pcustom tclIndex]] } {
            if { $pwd != $pcustom } {
                lappend auto_path $pcustom
                }
            }
        # Next, add the "lib" subdirectory to the
        # auto_path so that HIS provided code is found
        lappend auto_path $phost [file join [file dirname $pwd] lib]
        }

    # compatibility with Tcl 8.4+
    dmh_import

    # if running hub script
    # the hub script is run after this one
    # change the titles etc after it runs
    after 1 "catch {
              wm title . \"EI Data Tables\"
              wm iconname . \"EI\nTables\"
              #wm iconify .
              }"

    # start the supervisor UI after the hub script is done
    after 1 ei_supervisor
    }

main


